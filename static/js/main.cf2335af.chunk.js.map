{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAiCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,iBACvBI,OAIP,uBAAGJ,UAAU,kBAAkBH,MCuPxBU,G,kNA9CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,kEAWVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASV,UAAU,aAChBS,EACC,yBAAKT,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZU,EAAOP,KAAI,SAAAe,GAAK,OACf,kBAAC,EAAD,CACEZ,IAAKY,EAAMC,GACXA,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,kB,GApCZsB,IAAMC,YChNxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.cf2335af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","\n//import PropTypes from 'prop-types';\n//import { render } from '@testing-library/react';\n/*\n//import logo from './logo.svg';\n//import './App.css';\n//import Food from \"./Food\";\n\n//  props.favourite === { favourite }\n//  아래 Compoment favourite 와 Food favourite 부분은 이름이 같아야 한다\n//function Food({ favourite }) {\n//  return <section class=\"container\">I like {favourite}</section class=\"container\">;\n//}\n\nfunction Food({ name, picture, rating}) {\n  return <section class=\"container\">\n    <h2>I like {name}</h2>\n    <h4>{rating}/5.0</h4>\n    <img src={picture} alt={name} />\n  </section class=\"container\">\n}\n\n//  체크 ,, 무조건 propTypes라고 설정\nFood.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired\n};\n\n//  웹사이트에 동적 데이터를 추가하는 방법\n//  데이터가 이미 API에서 왔다고 가정!\n//  오브젝트 배열\n/*\narray안에 있는 차일드들은 고유한(unique) key prop을 가져야 한다.\n리액트에서는 엘리먼트가 많을 경우 고유한 key라는 것을 정해주어야한다.\n그래서, movies 배열에 id라는 것을 하나 더 만든후, 중복되지 않게 작성\n\n\nconst foodILike = [\n  {\n    id:1,\n    name: \"Kimchi\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fxb8bBaPlvb4%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 5\n  },\n  {\n    id:2,\n    name: \"Samgyeopsal\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fxb8bBaPlvb4%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 4.9\n  },\n  {\n    id:3,\n    name: \"Bibimbap\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fxb8bBaPlvb4%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 4.8\n  },\n  {\n    id:4,\n    name: \"Doncasu\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fxb8bBaPlvb4%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 5.5\n  },\n  {\n    id:5,\n    name: \"Kimbap\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fxb8bBaPlvb4%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 4.7\n  }\n];\n\n/*\nfunction renderFood(dish) {\n  console.log(dish);\n  return <Food name={dish.name} picture={dish.image} />\n}\n\n\n\n//  father(App) -> children(Food) props를 사용해서 data 보내기\n// jsx => HTML + Javascript\n//  Component를 가져와서 Browser가 이해할 수 있는 평범한 일반 HTML로 만든다\n//  Component는 대문자 시작\n//  props는 뭐든지 component에 넣게 되는 것들 -> props는 argument로 간다\n<Food favourite=\"kimchi\" />\n<Food favourite=\"ramen\" />\n<Food favourite=\"samgiopsal\" />\n<Food favourite=\"chukumi\" />\n\nnpm -i prop-types\n-> 내가 전달받은 props가 내가 원하는 props인지를 확인\n\nfunctiond component\nfunction App() {\n  return (\n    <section class=\"container\">\n      {foodILike.map(dish => (\n        <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />\n      ))}\n    </section class=\"container\">\n  );\n}\n*/\n\n//  class App -> React Component\n//  React.class.Componet -> class App 확장\n//  Function component는 function이고 뭔가를 return -> screen 표시\n//  class component는 class 하지만 react component로 부터 확장되고 screen에 표시\n//  react는 자동적으로 모든 class component의 render method를 실행하고자 한다\n//  바꿀 데이터를 state안으로 ㄱㄱ \n//  state를 직접 변경하지 마라!\n//  setState를 호출하면 react는 state를 refresh하고 또한 render function을 호출\n//  state를 직접 변경한다고 해서 render function이 refresh 되지 않느다 그래서 변경안된다\n//  lift cycle method => react가 component를 생성하는 그리고 없애는 방법\n\n/*\nMounting\n컴포넌트의 탄생\nconstructor : 컴포넌트가 생성될 떄\nrender()\ncomponentDidMount : 컴포넌트가 최초에 생성 된 후\n\nUpdating\n컴포넌트의 업데이트\nsetState\nrender()\ncomponentDidUpdate : setState 이후에\n\nUnmounting\n컴포넌트가 죽는 것. 언제? 페이지를 바꿀 때 등등 다양한 경우가 있다.\ncomponentWillUnmount : 컴포넌트의 수명이 끝날 때 , 대표적으로 리프레쉬, 페이지 전환\n\nclass App extends React.Component {\n  state = {\n    count: 0\n  };\n  add= () => {\n    this.setState(current => ({ count: current.count + 1}));\n  };\n  minus = () => {\n    this.setState(current => ({count : current.count - 1}));\n  };\n\n  render() {\n    return <section class=\"container\">\n      <h1>The number is: {this.state.count}</h1>\n      <button onClick={this.add}>Add</button>\n      <button onClick={this.minus}>Minus</button>\n    </section class=\"container\">\n  }\n}\n\n//https://yts.mx/\n\nimport React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async() => {\n    //movies.data.data.movies\n    const { data: { data : {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?srot_by=rating\");\n    this.setState( { movies, isLoading: false } )\n    //console.log(movies);\n  }\n  componentDidMount() {\n    \n    setTimeout(() => {\n      this.setState({isLoading: false})\n    }, 6000);\n    \n    this.getMovies();\n  };\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? ( \n            <div className=\"loader\">\n              <span className=\"loader_text\">Loading...</span>\n            </div>\n          ) : (\n            <div className=\"movies\">\n              {movies.map(movie => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                />\n              ))}\n          </div>\n          )}\n      </section>\n    );\n  }\n}\n\n */\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\n//  react application은 한 번에 하나의 component만 rendering 할 수 있다!\n//  따라서 모든 것은 App 안에 들어가야 한다!\n//  App 안에 많은 component를 넣을 수 있다.\n//  그리고 이러한 component 안에 더 많은 component를 import 할 수 있다.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}